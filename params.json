{"name":"Typescript Preprocessor","tagline":"Typescript Preprocessor","body":"# TypescriptPreprocessor\r\n\r\nA typescript preprocessor helper based on simple attachable plugins.\r\n\r\n## Avaliable Plugins: ##\r\n\r\n* @embed  -> embeds png,svg,js,txt into a png library file.\r\n* @source -> adds more than one source folder to classpath.\r\n* @import -> use cls.ass.packages as imports. Automatically resolves relative reference paths.\r\n* @define -> use cls.ass.packages as definition imports. Automatically resolves relative reference paths to .d.ts files.\r\n\r\n\r\n## Dependencies ##\r\n\r\nTypescriptPreprocessor uses many dependecies but one [ node-canvas ] needs Cairo as a backed Canvas implementation for NodeJS so:\r\n\r\n\tUnless previously installed you'll need Cairo!!!.\r\n\r\n### Cairo download & instalation instructions\r\n\r\n* [http://cairographics.org/download/](http://cairographics.org/download/)\r\n* [https://github.com/LearnBoost/node-canvas/wiki/_pages](https://github.com/LearnBoost/node-canvas/wiki/_pages)\r\n\r\n( Installed it with ports without problems. )\r\n\r\n## Installation ##\r\n\r\n\tsudo npm install -g TypescriptPreprocessor\r\n\t\r\n#### EMFILE max files open error ####\r\n\r\nIf you get an EMFILE max files open error during install.\r\nYou need to CHANGE the max open files opened to a higher value with the command:\r\n\t\r\n\t$ sudo ulimit -n 1024\r\n\t\r\nThis is only a temporally fix but it gets the work done!\t\r\n## Command line usage ##\r\n\r\n\tUsage: tsp --root projectRootDir -source inputFile\r\n\r\n\tOptions:\r\n\t  -r, --root     Project Root dir\r\n\t  -s, --source   Source file\r\n\t  -i, --install  Install Preprocessor to project\r\n\r\n\r\n## WebStorm Integration##\r\n\r\n###ToolbarIcon and ExternalTools:###\r\n\r\n\r\nTo install the ExternalTools & Toolbar integration:\r\n\r\n* Open Webstorm.\r\n* Goto to file import settings.\r\n* Localize the file TSPSettings.jar and load it.\r\n* Restart. Done!!\r\n\r\nNow every time you need to process a xxxx.lib.tsp, sources.tsp or any .ts file containing @import/@define directives you can **tap the new icon [TS] in the toolbar** to get the preprocessing done ;-)\r\n\r\n\r\n## Getting started ##\r\n\r\n### Preparing a new TSP project ###\r\n\r\nFirst you need to install the tool to our current project.\r\n\r\n\tcd /path/to/your/project\r\n\ttsp --install\r\n\r\nA typical setup will involve **adding two files** to your project: **config.tsp** and the **sources.tsp**\r\n\r\n### config.tsp ###\r\n\r\nHere you can configure some plugin preferences\r\n\r\n\t{\r\n\t\t\"root\": \"/path/to/your/project\",\r\n\t\t\"pluginData\": {\r\n\t\t\t\"SourcePaths\": {\r\n\t\t\t\t\"sources\": [\r\n\t\t\t\t\t// DO NOT TOUCH\r\n\t\t\t\t\t// Here will be the project source\r\n\t\t\t\t\t// folders where TSP will search for\r\n\t\t\t\t\t// classes & definitions\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t\"ImportsToReference\": {\r\n\t\t\t\t\"enableUndo\": false\r\n\t\t\t\t//By default @import will remove the @import directive\r\n\t\t\t\t//after processing.\r\n\t\t\t\t//Set to true to leave it untouched   \r\n\t\t\t},\r\n\t\t\t\"DefinitionToReference\": {\r\n\t\t\t\t\"enableUndo\": false\r\n\t\t\t\t//By default @define will remove the @define directive\r\n\t\t\t\t//after processing.\r\n\t\t\t\t//Set to true to leave it untouched \t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n### sources.tsp\r\n\r\nUse this file to define the TSP project sourceFolders.\r\nWhen TSP finds a ///@import or ///@define directive it will search across all the sourceFolders to test if it can find the import/define file.\r\n\r\nIn the next example I have defined 2 main sourceFolders: src and otherSourceFolder.\r\n\r\n### Defining multiple source folders\r\n**(for now...) Source folders must be relative to the project root** \r\n\r\n\r\n\t///<!SOURCE_FOLDER_PATHS>\r\n\t///@source /src\r\n\t///@source /otherSourceFolder\r\n\r\n## Embending content\r\n\r\nTo use the embed directives **you must create a file named xxxx.lib.tsp**.\r\n\r\nThe resulting png file name will be **xxxx.lib.png**\r\n\r\nThe @embed & @embedLibrary directives provides a simple way of generating a library of \"media elements\", allowing to embed inside the resulting png image:\r\n\r\n* SVG files that will be converted to png or Canvas context instructions\r\n* ( More on svg conversion [https://github.com/xperiments/svg2ctx](https://github.com/xperiments/svg2ctx) )\r\n* PNG files\r\n* JS Files\r\n* CSS files\r\n* Other text files\r\n\r\n#### @embedLibrary Usage\r\n\r\n**( You must declare the @embedLibrary before any @embed directive )**\r\n\r\nThe @embedLibrary directive lets us specify:\r\n\r\n* The resulting library export name\r\n* The method for \"Texture Packing\"\r\n* The optimization method of the resulting png file\r\n\r\nUsage inside xxxx.lib.tsp:( **pay attention to the ///@embed… format** )\r\n\r\n\t///@embedClass{name:'LibraryExportedName',sort:'area',compression:'none'}\r\n\r\n\r\n##### options #####\r\n\tname: The resulting library export name\r\n\tsort: The method for \"Texture Binary Packing\"\r\n\t\r\n\t  * maxside [Default]\r\n\t  * width\r\n\t  * height\r\n\t  * area\r\n\r\n\tcompression: The optimization method of the resulting png file \r\n\r\n\t  * none\r\n\t  * low\r\n\t  * med\r\n\t  * high\r\n\t  * best\r\n\r\n#### @embed Usage\r\n\r\n**( You must declare the @embed after the @embedLibrary directive )**\r\n\r\nThe @embed directive lets us add an element to the current library:\r\n\r\n\t///@embedClass{name:'LibraryExportedName',sort:'area',compression:'none'}\r\n\t///@embed { src:'sourceFile.png', member:'myPNG' }\r\n\t///@embed { src:'sourceFile.js',  member:'myJS' }\r\n\t///@embed { src:'sourceFile.svg', member:'mySVG_PNG', format:'png' }\r\n\t///@embed { src:'sourceFile.svg', member:'mySVG_CTX', format:'ctx' }\t\r\n\r\n\r\n##### options #####\r\n\r\n\t///@embed { src:'sourceFile.svg', member:'mySVG_CTX', format:'ctx' }\r\n\t\r\n\tsrc: The source file to include\r\n\tmember: The exported library member name\r\n\tformat: Used only in svg files to specify the output format.\r\n\r\n\t  * png => converts the svg to a png image and includes it in the lib.\r\n\t  * ctx => converts the svg to a js file containing a class\r\n\t           that you can use to render the svg to a canvas\r\n\r\n\r\n#### Loading back the library ####\r\n\r\nFor loading back the elemens from the library you need to use the [TypescriptPreprocessor-Loader](https://github.com/xperiments/TypescriptPreprocessor-Loader) library.\r\n\r\nExample code:\r\n\r\n\t$LIB.load('demo.lib.png').on(pulsar.events.Event.COMPLETE, onLoaded );\r\n\tfunction onLoaded()\r\n\t{\r\n\t\t// Reference to our current loaded library\r\n\t\t// Remeber that the name must correspond to the one\r\n\t\t// you assigned in the\r\n\t\t// @embedLibrary{ name:'xxxx' ...\r\n\t\tvar myLib = $LIB('TestLibrary');\r\n\t\t\r\n\t\t// returns the master library png image [HTMLImageElement]\r\n\t\tvar libraryImage = myLib.getLibImage(); \r\n\t\t\r\n\t\t// returns \"myCanvasElement\" as a [HTMLCanvasElement] \r\n\t\tvar canvasElement = myLib.getCanvas(\"myCanvasElement\");\r\n\t\t\r\n\t\t// returns \"myImageElement\" as a [HTMLImageElement]\r\n\t\tvar myImageElement = myLib.getImage(\"myImageElement\");\r\n\t\t\r\n\t\t// returns \"myCustomCode\" as a string\r\n\t\tvar myCustomCode = myLib.getCode(\"myCustomCode\");\r\n\t\t\r\n\t\t// returns \"myShapeElement\" as a pulsar.lib.shapes.Shape instance\r\n\t\tvar myShapeElement = myLib.getShape(\"/js/libs/jquery.min.js\");\r\n\t\t\r\n\t\t// injects \"myCssCode\" into the DOM\r\n\t\tvar myCssCode = myLib.injectCss(\"myCssCode\");\r\n\t\t\r\n\t\t// injects \"myJSCode\" into the DOM\r\n\t\tvar myJSCode = myLib.injectScript(\"myJSCode\");\r\n\t\r\n\t}\r\n\t\r\nIn depth TypescriptPreprocessor-Loader usage:\r\n[http://xperiments.github.io/TypescriptPreprocessor/](http://xperiments.github.io/TypescriptPreprocessor/)\r\n\r\n\r\n## TS Language Directives ##\r\n### @import & @define directives:\r\nTranslates @import @define with package names to relative ///\\<reference path=\"….\"/>\r\n\r\n```\r\n///@import es.xperiments.Demo\r\n///@define es.xperiments.Demo\r\n```\r\nbecomes:\r\n\r\n```\r\n///<reference path='src/es/xperiments/demo.ts'/>\r\n///<reference path='src/es/xperiments/demo.d.ts'/>\r\n```\r\n\r\nAlso you can configure the \"enableUndo\" property inside the tsp.config.js to let the preprocessor to no remove the original directive. This way you can easely revert to the original @import @define directive.\r\n\r\n```\r\n///@import es.xperiments.Demo\r\n///@define es.xperiments.Demo\r\n```\r\nbecomes:\r\n\r\n```\r\n///<reference path='src/es/xperiments/demo.ts'/>@import es.xperiments.Demo\r\n///<reference path='src/es/xperiments/demo.d.ts'/>@define es.xperiments.Demo \r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}