{"name":"Typescript Preprocessor","tagline":"Typescript Preprocessor","body":"# TypescriptPreprocessor\r\n\r\nA typescript preprocessor helper based on simple attachable plugins.\r\n\r\n#### Avaliable Plugins:\r\n\r\n* @embed -> embeds png,svg,js,txt into a png library file. Also generates atlas inside the png and creates a library.d.ts file\r\n* @source -> adds more than one source folder to classpath.\r\n* @import -> use cls.ass.packages as imports. Automatically resolves relative reference paths.\r\n* @define -> use cls.ass.packages as definition imports. Automatically resolves relative reference paths to .d.ts files.\r\n\r\n\r\n## Installation\r\n\r\nTypescriptPreprocessor uses node-canvas as Cairo backed Canvas implementation for NodeJS.\r\n\r\n**Unless previously installed you'll need Cairo.**\r\n\r\n#### Cairo instalation instructions\r\n\r\n* http://cairographics.org/download/\r\n* https://github.com/LearnBoost/node-canvas/wiki/_pages\r\n\r\n#### Installing TypescriptPreprocessor\r\n\tsudo npm install -g TypescriptPreprocessor\r\n\t\r\n#### Command line usage\r\n\r\nbla bla\r\n\r\n\r\n#### Installing webstorm ToolbarIcon and ExternalTools configuration\t\r\n\r\nbla bla\r\n\r\n## Getting started\r\n\r\n#### Preparing a new TSP project\r\n\r\nFirst we need to install the tool to our current project.\r\n\r\n\tcd /path/to/your/project\r\n\ttsp --install\r\n\r\nA typical setup will involve adding two files to your project: tsp.config.json and the tsp.sources.ts\r\n\r\n#### tsp.config.json\r\n\r\nHere you can configure some plugin preferences\r\n\r\n\t{\r\n\t\t\"root\": \"/path/to/your/project\",\r\n\t\t\"pluginData\": {\r\n\t\t\t\"SourcePaths\": {\r\n\t\t\t\t\"sources\": [\r\n\t\t\t\t\t// DO NOT TOUCH\r\n\t\t\t\t\t// Here will be the project source\r\n\t\t\t\t\t// folders where TSP will search for\r\n\t\t\t\t\t// classes & definitions\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t\"ImportsToReference\": {\r\n\t\t\t\t\"enableUndo\": false\r\n\t\t\t\t//By default @import will remove the @import directive\r\n\t\t\t\t//after processing.\r\n\t\t\t\t//Set to true to leave it untouched   \r\n\t\t\t},\r\n\t\t\t\"DefinitionToReference\": {\r\n\t\t\t\t\"enableUndo\": false\r\n\t\t\t\t//By default @define will remove the @define directive\r\n\t\t\t\t//after processing.\r\n\t\t\t\t//Set to true to leave it untouched \t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n#### tsp.sources.ts\r\n\r\nUse this file to define the TSP project sourceFolders.\r\nWhen TSP finds a ///@import or ///@define directive it will search across all the sourceFolders to test if it can find the import/define file.\r\n\r\nIn the next example we have defined 2 main sourceFolders: src and otherSourceFolder. \r\n\r\n\r\n\t///<!SOURCE_FOLDER_PATHS>\r\n\t///@source /src\r\n\t///@source /otherSourceFolder\r\n\r\n### @import & @define directives:\r\nTranslates @import with normal package names to ///\\<reference path=\"â€¦.\"/>\r\n\r\n```\r\n///@import es.xperiments.Demo\r\n///@define es.xperiments.Demo\r\n```\r\nbecomes:\r\n\r\n```\r\n///<reference path='src/es/xperiments/demo.ts'/>\r\n///<reference path='src/es/xperiments/demo.d.ts'/>\r\n```\r\n\r\nAlso you can configure the \"enableUndo\" property inside the tsp.config.js to let the preprocessor to no remove the original directive. This way you can easely revert to the original @import @define directive.\r\n\r\n```\r\n///@import es.xperiments.Demo\r\n///@define es.xperiments.Demo\r\n```\r\nbecomes:\r\n\r\n```\r\n///<reference path='src/es/xperiments/demo.ts'/>@import es.xperiments.Demo\r\n///<reference path='src/es/xperiments/demo.d.ts'/>@define es.xperiments.Demo \r\n```\r\n\r\n### @embed @embedLibrary directives \r\n\r\nThe @embed @embedLibrary directives provides a simple way of generating a library of \"medias\", allowing to embed inside the resulting png image:\r\n\r\n* SVG files that will be converted to png or Canvas context instructions\r\n* Others pngs\r\n* Javascript Files\r\n* CSS files\r\n* Other text files\r\n\r\n\r\n#### @embedLibrary Usage\r\n\r\n**( You must declare the @embedLibrary before any @embed directive )**\r\n\r\nThe @embedLibrary directive lets us specify:\r\n\r\n* The resulting library export name\r\n* The method for \"Texture Packing\"\r\n* The optimization method of the resulting png file\r\n\r\n\t///@embedClass { name:'LibraryExportedName', sort:'maxside', compression:'best' }\r\n\r\n\r\n##### Avaliable options\r\n**name**: The resulting library export name\r\n\r\n**sort**: The method for \"Texture Binary Packing\"\r\n\r\n* maxside [Default]\r\n* width\r\n* height\r\n* area\r\n\r\n**compression**: The optimization method of the resulting png file \r\n\r\n* none\r\n* low\r\n* med\r\n* high\r\n* best\r\n\r\n#### @embed Usage\r\n\r\n**( You must declare the @embed after the @embedLibrary directive )**\r\n\r\nThe @embed directive lets us add an element to the current library:\r\n\r\n\t///@embed { src:'sourceFile.png', member:'myPNG' }\r\n\t///@embed { src:'sourceFile.js',  member:'myJS' }\r\n\t///@embed { src:'sourceFile.svg', member:'mySVG_PNG', format:'png' }\r\n\t///@embed { src:'sourceFile.svg', member:'mySVG_CTX', format:'ctx' }\t\r\n\r\n\r\n##### Avaliable options\r\n\r\n**src**: The source file to include\r\n\r\n**member**: The exported library member name\r\n\r\n**format**: Used only with svg, specifies the output format.\r\n\r\n* format: **png** => converts the svg to a png image and includes it in the lib.\r\n* format: **ctx** => converts the svg to a js file containing a class that you can use to render the svg to a canvas\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}